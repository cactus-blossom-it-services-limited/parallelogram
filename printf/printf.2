#!/bin/bash
# printf examples

# use %b specifier instead of %s, the same but allows 
# to interpret escape sequences with an argument:
# contrast:
printf "%s\n" "1" "2" "\n3" # this prints \n3
# with:
printf "%b\n" "1" "2" "\n3" # this prints inserting 3 newlines

# for printing integers we can use %d specifier:
printf "%d\n" 255 0xff 0377 3.5
# prints:
# 255
# 255
# 255
# bash: printf: 3.5: invalid number

# the %d specifier refuses to print anything except integers.
# to printf floating point numbers use %f specifier!:
printf "%f\n" 255 0xff 0377 3.5
# prints:
# 255.000000
# 255.000000
# 377.000000
# 3.500000

# the default behaviour of %f specifier is to print floating 
# point numbers with 6 decimal places. Say to limit precision to 1:
printf "%.1f\n" 255 0fxx 0377 3.5
# prints:
# 255.0
# 255.0
# 377.0
# 3.5

# Formatting to 3 places with preceding 0:
for i in $( seq 1 10 ); do printf "%03d\t" "$i"; done
# prints:
# 001  002  003  004 .... to 010
